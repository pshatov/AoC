# ---------------------------------------------------------------------------------------------------------------------
# AoC 2015
# ---------------------------------------------------------------------------------------------------------------------
# 2.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class BoxClass:

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, line: str) -> None:
        l, w, h = [int(t) for t in line.split('x')]

        lw, lh, wh = l * w, l * h, w * h
        slack = min(lw, lh, wh)

        self.wrap_amount = 2 * (lw + lh + wh) + slack

        lwh = [l, w, h]
        d_min = min(lwh)

        lwh.remove(d_min)
        d_mid = min(lwh)

        bow = l * w * h
        self.ribbon_length = 2 * (d_min + d_mid) + bow
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input_2.txt') as f:
        f_lines = f.readlines()

    boxes = []
    for fl in f_lines:
        boxes.append(BoxClass(fl.strip()))

    total_wrap_amount = sum([box.wrap_amount for box in boxes])
    print("part 1: %d" % total_wrap_amount)

    total_ribbon_length = sum([box.ribbon_length for box in boxes])
    print("part 2: %d" % total_ribbon_length)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End-of-File
# ---------------------------------------------------------------------------------------------------------------------
