# ---------------------------------------------------------------------------------------------------------------------
# AoC 2015
# ---------------------------------------------------------------------------------------------------------------------
# 6.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
import re


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from re import Pattern
from enum import Enum
from typing import Tuple, Dict, List, Callable


# ---------------------------------------------------------------------------------------------------------------------
class ActionEnum(Enum):
    TurnOn = 'turn on'
    TurnOff = 'turn off'
    Toggle = 'toggle'
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Types
# ---------------------------------------------------------------------------------------------------------------------
ActionParseType = Tuple[ActionEnum, Tuple[int, int], Tuple[int, int]]


# ---------------------------------------------------------------------------------------------------------------------
# Settings
# ---------------------------------------------------------------------------------------------------------------------
XY = 1000
PATTERN_THROUGH = r"(\d+),(\d+) through (\d+),(\d+)"


# ---------------------------------------------------------------------------------------------------------------------
# Variables
# ---------------------------------------------------------------------------------------------------------------------
ActionPatternsDict: Dict[ActionEnum, Pattern]
ActionPatternsDict = {}


# ---------------------------------------------------------------------------------------------------------------------
def action_part1(value: int, action: ActionEnum) -> int:
    if action == ActionEnum.Toggle:
        return int(not bool(value))
    elif action == ActionEnum.TurnOn:
        return 1
    elif action == ActionEnum.TurnOff:
        return 0
    else:
        raise RuntimeError
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def action_part2(value: int, action: ActionEnum) -> int:
    if action == ActionEnum.Toggle:
        return value + 2
    elif action == ActionEnum.TurnOn:
        return value + 1
    elif action == ActionEnum.TurnOff:
        return max(0, value - 1)
    else:
        raise RuntimeError
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def parse_fl(fl: str) -> ActionParseType:

    for a in ActionPatternsDict.keys():
        m = ActionPatternsDict[a].fullmatch(fl)
        if m is not None:
            return a, (int(m.group(1)), int(m.group(2))), (int(m.group(3)), int(m.group(4)))

    raise RuntimeError
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def handler(lights: List[List[int]], action: ActionParseType, func: Callable) -> None:
    a, (x0, y0), (x1, y1) = action
    for y in range(y0, y1 + 1):
        for x in range(x0, x1 + 1):
            lights[y][x] = func(lights[y][x], a)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    for a in ActionEnum:
        ActionPatternsDict[a] = re.compile("%s %s" % (a.value, PATTERN_THROUGH))

    lights1, lights2 = [], []
    for y in range(XY):
        lights1.append([0] * XY)
        lights2.append([0] * XY)

    with open('input_6.txt') as f:
        f_lines = [s.strip() for s in f.readlines()]

    for fl in f_lines:
        a_xy0_xy1 = parse_fl(fl)
        handler(lights1, a_xy0_xy1, action_part1)
        handler(lights2, a_xy0_xy1, action_part2)

    print("part 1: %d" % sum([sum(lx) for lx in lights1]))
    print("part 2: %d" % sum([sum(lx) for lx in lights2]))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End-of-File
# ---------------------------------------------------------------------------------------------------------------------
