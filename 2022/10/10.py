# ---------------------------------------------------------------------------------------------------------------------
# 10.py
# ---------------------------------------------------------------------------------------------------------------------
# AoC '22
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
from enum import Enum
from typing import List


# ---------------------------------------------------------------------------------------------------------------------
class OpCode(str, Enum):

    AddX = 'addx'
    NoOp = 'noop'
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class CRT:

    W = 40
    H = 6

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self) -> None:
        self._x = 0
        self._y = 0
        self._buffer = []
        for y in range(CRT.H):
            self._buffer.append([])
            for x in range(CRT.W):
                self._buffer[-1].append('.')
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def cycle(self) -> None:
        self._x += 1
        if self._x == CRT.W:
            self._x = 0
            self._y += 1
            if self._y == CRT.H:
                self._y = 0
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def pset(self) -> None:
        self._buffer[self._y][self._x] = '#'
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def x(self) -> int:
        return self._x
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def render(self) -> None:
        for y in range(CRT.H):
            for x in range(CRT.W):
                print(self._buffer[y][x], end='')
            print()
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class CPU:

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, crt: CRT) -> None:
        self._pc = 0
        self._x = 1
        self._signals = []
        self._crt = crt
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def decode(self, instr) -> None:

        opcode, param = instr

        if opcode == OpCode.NoOp:
            self._pc += 1
            self._output_signal()
            self._draw_sprite()
            self._crt.cycle()

        elif opcode == OpCode.AddX:
            self._pc += 1
            self._output_signal()
            self._draw_sprite()
            self._crt.cycle()

            self._pc += 1
            self._output_signal()
            self._draw_sprite()
            self._crt.cycle()

            self._x += param

        else:
            raise RuntimeError
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def _draw_sprite(self) -> None:
        if self._crt.x() in range(self._x - 1, self._x + 2):
            self._crt.pset()
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def _output_signal(self) -> None:
        if self._pc % 40 == 20:
            self._signals.append(self._pc * self._x)
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def signals(self) -> List[int]:
        return self._signals
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    @property
    def crt(self) -> CRT:
        return self._crt
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as file:
        all_lines = [line for line in [line.strip() for line in file] if line]

    all_instrs = []
    for next_line in all_lines:
        line_parts = next_line.split(' ')
        opcode, param = OpCode(line_parts[0]), None
        if opcode == OpCode.NoOp:
            assert len(line_parts) == 1
        elif opcode == OpCode.AddX:
            assert len(line_parts) == 2
            param = int(line_parts[1])
        instr = opcode, param
        all_instrs.append(instr)

    crt = CRT()
    cpu = CPU(crt)
    for next_instr in all_instrs:
        cpu.decode(next_instr)

    print("part 1: %d" % sum(cpu.signals()))
    print("part 2:")
    cpu.crt.render()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
