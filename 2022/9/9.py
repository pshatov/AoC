# ---------------------------------------------------------------------------------------------------------------------
# 9.py
# ---------------------------------------------------------------------------------------------------------------------
# AoC '22
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
import numpy as np

from enum import Enum
from typing import List, Tuple, Optional


# ---------------------------------------------------------------------------------------------------------------------
class Dir(str, Enum):
    Left = 'L'
    Right = 'R'
    Up = 'U'
    Down = 'D'
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class XY:

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, x: Optional[int] = 0, y: Optional[int] = 0) -> None:
        self.x = x
        self.y = y
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def __repr__(self) -> str:
        return "<%d, %d>" % (self.x, self.y)
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class GameField:

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, all_moves: List[Tuple[Dir, int]], num_tails: Optional[int] = 1) -> None:

        xy = XY()
        self._xy_min, self._xy_max = XY(), XY()

        for move_dir, move_steps in all_moves:
            GameField._move_xy(xy, move_dir, move_steps)
            GameField._update_min_max_xy(self._xy_min, self._xy_max, xy)

        self._dx = self._xy_max.x - self._xy_min.x + 1
        self._dy = self._xy_max.y - self._xy_min.y + 1

        self._matrix = np.zeros((self._dy, self._dx), dtype=np.int_)

        self._head_xy = XY()
        self._all_tails_xy = []
        while num_tails > 0:
            self._all_tails_xy.append(XY())
            num_tails -= 1
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def _move_tail(self, tail_xy: XY, head_xy: XY) -> None:

        dx = head_xy.x - tail_xy.x
        dy = head_xy.y - tail_xy.y

        dx1 = 0 if dx == 0 else dx // abs(dx)
        dy1 = 0 if dy == 0 else dy // abs(dy)

        if dy == 0:
            if dx == 0:
                pass
            elif abs(dx) == 1:
                pass
            else:
                tail_xy.x += dx1

        elif abs(dy) == 1:
            if dx == 0:
                pass
            elif abs(dx) == 1:
                pass
            else:
                tail_xy.x += dx1
                tail_xy.y += dy1

        else:
            if dx == 0:
                tail_xy.y += dy1
            elif abs(dx) == 1:
                tail_xy.x += dx1
                tail_xy.y += dy1
            else:
                tail_xy.x += dx1
                tail_xy.y += dy1
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def _set_matrix(self, xy: XY, value: int) -> None:
        self._matrix[xy.y - self._xy_min.y, xy.x] = value
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def _move_all_tails(self) -> None:
        for i in range(len(self._all_tails_xy)):
            prev_tail = self._all_tails_xy[i - 1] if i > 0 else self._head_xy
            self._move_tail(self._all_tails_xy[i], prev_tail)
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def step(self, move_dir: Dir) -> None:
        self._move_xy(self._head_xy, move_dir)
        self._move_all_tails()
        self._set_matrix(self._all_tails_xy[-1], 1)
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def sum(self) -> int:
        return self._matrix.sum()
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    @staticmethod
    def _update_min_max_xy(xy_min: XY, xy_max: XY, xy: XY) -> None:
        xy_min.x, xy_min.y = min(xy_min.x, xy.x), min(xy_min.y, xy.y)
        xy_max.x, xy_max.y = max(xy_max.x, xy.x), max(xy_max.y, xy.y)
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    @staticmethod
    def _move_xy(xy: XY, move_dir: Dir, move_steps: Optional[int] = 1) -> None:

        if move_dir is None:
            raise RuntimeError

        elif move_dir == Dir.Left:
            xy.x -= move_steps

        elif move_dir == Dir.Right:
            xy.x += move_steps

        elif move_dir == Dir.Up:
            xy.y += move_steps

        elif move_dir == Dir.Down:
            xy.y -= move_steps

        else:
            raise RuntimeError
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as file:
        all_lines = [line for line in [line.strip() for line in file] if line]

    all_moves = []
    for next_line in all_lines:
        line_parts = next_line.split(' ')
        move = Dir(line_parts[0]), int(line_parts[1])
        all_moves.append(move)

    game_field = GameField(all_moves)
    for move_dir, move_steps in all_moves:
        for i in range(move_steps):
            game_field.step(move_dir)
    print("part 1: %d" % game_field.sum())

    game_field = GameField(all_moves, 9)
    for move_dir, move_steps in all_moves:
        for i in range(move_steps):
            game_field.step(move_dir)
    print("part 2: %d" % game_field.sum())
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
