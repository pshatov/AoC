# ---------------------------------------------------------------------------------------------------------------------
# 20.py
# ---------------------------------------------------------------------------------------------------------------------
# AoC '22
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import Optional, List


# ---------------------------------------------------------------------------------------------------------------------
class Number:

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, value: int, left: Optional['Number'], right: Optional['Number']) -> None:
        self.value = value
        self.left = left
        self.right = right
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def __repr__(self) -> str:
        left = "%d" % self.left.value if self.left is not None else '?'
        right = "%d" % self.right.value if self.right is not None else '?'
        return "< %s | %d | %s >" % (left, self.value, right)
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class NumbersList:

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, all_numbers: List[int]) -> None:

        self.numbers = []
        self.count = len(all_numbers)

        left, right = None, None
        for i in range(self.count):
            self.numbers.append(Number(all_numbers[i], left, right))
            if i > 0:
                self.numbers[i - 1].right = self.numbers[i]
                self.numbers[i].left = self.numbers[i - 1]

        self.numbers[0].left = self.numbers[-1]
        self.numbers[-1].right = self.numbers[0]
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    @staticmethod
    def _glue(left: Number, right: Number) -> None:
        left.right = right
        right.left = left
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    @staticmethod
    def _insert(left, middle, right) -> None:
        left.right = middle
        middle.left = left
        middle.right = right
        right.left = middle
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def mix(self, i: int) -> None:

        number = self.numbers[i]
        period = self.count - 1
        value = number.value % period

        old_left, old_right = number.left, number.right

        if value == 0:
            pass
        elif value == 1:
            old_right_right = old_right.right
            self._glue(old_left, old_right)
            self._insert(old_right, number, old_right_right)
        elif value == period - 2:
            old_left_left = old_left.left
            self._glue(old_left, old_right)
            self._insert(old_left_left, number, old_right)
        else:
            new_right = old_right
            while value > 0:
                new_right = new_right.right
                value -= 1
            new_left = new_right.left
            self._glue(old_left, old_right)
            self._insert(new_left, number, new_right)
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def calc_result(nl: NumbersList) -> int:

    n = None
    for i in range(nl.count):
        if nl.numbers[i].value == 0:
            n = nl.numbers[i]
            break
    assert n is not None

    s = 0
    for j in range(3):
        for i in range(1000):
            n = n.right
        s += n.value

    return s
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as file:
        all_numbers = [int(line) for line in [line.strip() for line in file] if line]

    nl = NumbersList(all_numbers)
    for i in range(nl.count):
        nl.mix(i)

    part1 = calc_result(nl)
    print("part 1: %d" % part1)

    key = 811589153
    nl = NumbersList(all_numbers)
    for i in range(nl.count):
        nl.numbers[i].value *= key
    for j in range(10):
        for i in range(nl.count):
            nl.mix(i)

    part2 = calc_result(nl)
    print("part 2: %d" % part2)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
