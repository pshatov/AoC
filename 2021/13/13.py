# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 13.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import Tuple, List, Dict


# ---------------------------------------------------------------------------------------------------------------------
# Types
# ---------------------------------------------------------------------------------------------------------------------
DotXY = Tuple[int, int]
Paper = List[List[bool]]


# ---------------------------------------------------------------------------------------------------------------------
def fold_paper(paper: Paper, f: str) -> None:
    f = f[len('fold along '):]

    coord = int(f[2:])
    if f.startswith('x='):
        _fold_paper_along_x(paper, coord)
    elif f.startswith('y='):
        _fold_paper_along_y(paper, coord)
    else:
        raise RuntimeError
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def _fold_paper_along_x(paper: Paper, fold_x: int) -> None:

    new_paper: List[Dict[int, bool]]
    new_paper = []

    for y in range(len(paper)):

        new_paper.append(dict())

        for x in range(fold_x):
            new_paper[-1][x] = paper[y][x]

        for x in range(fold_x + 1, len(paper[y])):
            x_new = 2 * fold_x - x
            new_paper[-1][x_new] = paper[y][x] or new_paper[-1][x_new] if x_new in new_paper[-1].keys() else False

    for y in range(len(paper)):
        paper[y].clear()
        for x in sorted(new_paper[y].keys()):
            paper[y].append(new_paper[y][x])
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def _fold_paper_along_y(paper: Paper, fold_y: int) -> None:
    pass
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        f_lines = [t.strip() for t in f.readlines()]

    i, dots = 0, []
    while len(f_lines[i]) > 0:
        dots.append(tuple(int(t) for t in f_lines[i].split(',')))
        i += 1

    i, folds = i + 1, []
    while i < len(f_lines):
        folds.append(f_lines[i])
        i += 1

    x_max = max(t[0] for t in dots)
    y_max = max(t[1] for t in dots)

    paper: Paper
    paper = []
    for y in range(y_max + 1):
        paper.append([False] * (x_max + 1))

    for dx, dy in dots:
        paper[dy][dx] = True

    fold_paper(paper, folds[0])
    num_dots = sum(sum(t) for t in paper)
    print("part 1: %d" % num_dots)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
