# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 22.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
import re
import numpy as np


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from enum import Enum
from typing import List, Optional


# ---------------------------------------------------------------------------------------------------------------------
# Settings
# ---------------------------------------------------------------------------------------------------------------------
REGION_SIZE = 50
REACTOR_SIZE = 2 * REGION_SIZE + 1


# ---------------------------------------------------------------------------------------------------------------------
class ActionEnum(Enum):
    On = 'on'
    Off = 'off'
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class Segment:

    begin: int
    end: int

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, begin: int, end: int) -> None:
        self.begin, self.end = begin, end
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def __repr__(self) -> str:
        return "%d..%d" % (self.begin, self.end)
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    def range(self) -> range:
        return range(self.begin, self.end + 1)
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
class Cuboid:

    action: bool

    x_seg: Segment
    y_seg: Segment
    z_seg: Segment

    RE_CUBOID = re.compile(r"x=(-?\d+)\.\.(-?\d+),y=(-?\d+)\.\.(-?\d+),z=(-?\d+)\.\.(-?\d+)")

    ActionLUT = {ActionEnum.On: True,
                 ActionEnum.Off: False}

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, s: str) -> None:

        m = None
        for a in ActionEnum:
            if s.startswith(a.value):
                m = self.RE_CUBOID.fullmatch(s[len(a.value) + 1:])
                self.action = self.ActionLUT[a]
                break

        if m is None:
            raise RuntimeError

        self.x_seg = Segment(int(m.group(1)), int(m.group(2)))
        self.y_seg = Segment(int(m.group(3)), int(m.group(4)))
        self.z_seg = Segment(int(m.group(5)), int(m.group(6)))
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# New Types
# ---------------------------------------------------------------------------------------------------------------------
Reactor = List[Cuboid]


# ---------------------------------------------------------------------------------------------------------------------
def get_overlapping_segment(a: Segment, b: Segment) -> Optional[Segment]:

    ab_left = max(a.begin, b.begin)
    ab_right = min(a.end, b.end)

    return None if ab_left > ab_right else Segment(ab_left, ab_right)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        f_lines = [t for t in [t.strip() for t in f.readlines()] if t]

    cuboids = []
    for fl in f_lines:
        cuboids.append(Cuboid(fl))

    reactor_segment = Segment(-REGION_SIZE, REGION_SIZE)
    reactor = np.zeros([REACTOR_SIZE, REACTOR_SIZE, REACTOR_SIZE], dtype=np.int_)

    for i in range(len(cuboids)):

        print("%d / %d" % (i + 1, len(cuboids)))

        ci = cuboids[i]

        overlap_x = get_overlapping_segment(reactor_segment, ci.x_seg)
        overlap_y = get_overlapping_segment(reactor_segment, ci.y_seg)
        overlap_z = get_overlapping_segment(reactor_segment, ci.z_seg)

        if overlap_x is None or overlap_y is None or overlap_z is None:
            continue

        new_value = 1 if ci.action else 0

        for x in overlap_x.range():
            for y in overlap_y.range():
                for z in overlap_z.range():
                    reactor[z + REGION_SIZE][y + REGION_SIZE][x + REGION_SIZE] = new_value

    print("sum(reactor) == %d" % np.sum(reactor))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
