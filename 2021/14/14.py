# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 14.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import Dict


# ---------------------------------------------------------------------------------------------------------------------
# Types
# ---------------------------------------------------------------------------------------------------------------------
PolymerType = Dict[str, int]
RuleType = Dict[str, str]


# ---------------------------------------------------------------------------------------------------------------------
def dict_add_key(d: dict, k: str) -> None:
    if k not in d.keys():
        d[k] = 0
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def do_step(components: PolymerType, pairs: PolymerType, rules: RuleType) -> None:

    new_pairs = dict()
    for t in pairs:
        if t in rules:

            extra = rules[t]
            extra_a, extra_b = t[0] + extra, extra + t[1]

            dict_add_key(new_pairs, t)
            dict_add_key(new_pairs, extra_a)
            dict_add_key(new_pairs, extra_b)
            dict_add_key(components, extra)

            new_pairs[t] -= pairs[t]
            new_pairs[extra_a] += pairs[t]
            new_pairs[extra_b] += pairs[t]
            components[extra] += pairs[t]

    for t in new_pairs:
        if t not in pairs:
            pairs[t] = 0
        pairs[t] += new_pairs[t]
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def calc_max_min(components: PolymerType) -> int:
    return max(components.values()) - min(components.values())
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        f_lines = [t.strip() for t in f.readlines()]

    polymer_pairs: PolymerType = dict()
    for i in range(len(f_lines[0]) - 1):
        t = f_lines[0][i: i + 2]
        dict_add_key(polymer_pairs, t)
        polymer_pairs[t] += 1

    rules = dict()
    for fl in f_lines[2:]:
        ab, c = fl.split(' -> ')
        rules[ab] = c

    polymer_components = dict()
    for p in f_lines[0]:
        dict_add_key(polymer_components, p)
        polymer_components[p] += 1

    for i in range(10):
        do_step(polymer_components, polymer_pairs, rules)

    print("part 1: %d" % calc_max_min(polymer_components))

    for i in range(40 - 10):
        do_step(polymer_components, polymer_pairs, rules)

    print("part 2: %d" % calc_max_min(polymer_components))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
