# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 13.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import Dict


# ---------------------------------------------------------------------------------------------------------------------
def do_step(polymer: str, rules: Dict[str, str]) -> str:

    polymer_pairs = [polymer[i: i + 2] for i in range(len(polymer) - 1)]
    for i in range(len(polymer_pairs)):
        pp = polymer_pairs[i]
        if pp in rules:
            polymer_pairs[i] = pp[0] + rules[pp] + pp[-1]
        if i > 0:
            polymer_pairs[i] = polymer_pairs[i][1:]

    new_polymer = ''.join(polymer_pairs)
    return new_polymer
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        f_lines = [t.strip() for t in f.readlines()]

    polymer = f_lines[0]
    rules = {}
    for fl in f_lines[2:]:
        ab, c = fl.split(' -> ')
        rules[ab] = c

    # print("Template: %s" % polymer)
    for i in range(10):
        polymer = do_step(polymer, rules)
        # print("After step %d: %s" % (i + 1, polymer))

    polymer_dict = dict()
    for p in polymer:
        if p not in polymer_dict:
            polymer_dict[p] = 0
        polymer_dict[p] += 1

    p_max = max(polymer_dict.values())
    p_min = min(polymer_dict.values())
    print("part 1: %d" % (p_max - p_min))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
