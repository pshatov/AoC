# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 11.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
import sys
import time


# ---------------------------------------------------------------------------------------------------------------------
# More Inputs
# ---------------------------------------------------------------------------------------------------------------------
from typing import List, Tuple


# ---------------------------------------------------------------------------------------------------------------------
# Types
# ---------------------------------------------------------------------------------------------------------------------
Field = List[List[int]]


# ---------------------------------------------------------------------------------------------------------------------
# Settings
# ---------------------------------------------------------------------------------------------------------------------
VT100_LVL_RGB: List[Tuple[int, int, int]]

STEPS = 100
FLASH_LVL = 10
VT100_LVL_RGB = []
VT100_LVL_CODES = {}
VT100_CLR_WHITE = "\033[38;2;255;255;255m"


# ---------------------------------------------------------------------------------------------------------------------
def vt100_cur_xy(x: int = 0, y: int = 0) -> None:
    sys.stdout.write("\033[%d;%dH" % (y + 1, x + 1))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def vt100_clr_fb_hack(lvl: int) -> None:
    sys.stdout.write(VT100_LVL_CODES[lvl])
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def dump_field(field: Field, steps: int = 0) -> None:
    vt100_cur_xy()
    for y in range(len(field)):
        field_y = field[y]
        for field_x in field_y:
            sys.stdout.write(VT100_LVL_CODES[field_x])
            # print("%d" % field_x, end='')
            print("O", end='')
        print()

    sys.stdout.write(VT100_CLR_WHITE)
    vt100_cur_xy(y=len(field))
    print("steps: %d" % steps)
    sys.stdout.flush()
    time.sleep(0.1)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def step(field: Field) -> int:

    flashes = []
    for y in range(len(field)):
        field_y = field[y]
        for x in range(len(field_y)):
            field[y][x] += 1
            if field[y][x] == FLASH_LVL:
                flashes.append((x, y))

    flashes_count = 0
    while len(flashes) > 0:

        new_flashes = []
        for f_x, f_y in flashes:
            adjacent_xy = get_adjacent_xy(f_x, f_y, len(field[f_y]), len(field))
            for adj_x, adj_y in adjacent_xy:
                field[adj_y][adj_x] += 1
                if field[adj_y][adj_x] == FLASH_LVL:
                    new_flashes.append((adj_x, adj_y))

        flashes_count += len(flashes)
        flashes = new_flashes

    for y in range(len(field)):
        field_y = field[y]
        for x in range(len(field_y)):
            if field[y][x] > 9:
                field[y][x] = 0

    return flashes_count
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def get_adjacent_xy(f_x: int, f_y: int, len_x: int, len_y: int) -> List[Tuple[int, int]]:

    # 7 0 1
    # 6 * 2
    # 5 4 3

    adj_xy = [(f_x,     f_y - 1),  # 0
              (f_x + 1, f_y - 1),  # 1
              (f_x + 1, f_y),      # 2
              (f_x + 1, f_y + 1),  # 3
              (f_x,     f_y + 1),  # 4
              (f_x - 1, f_y + 1),  # 5
              (f_x - 1, f_y),      # 6
              (f_x - 1, f_y - 1)]  # 7

    if f_x == 0:
        adj_xy[5], adj_xy[6], adj_xy[7] = None, None, None
    elif f_x == (len_x - 1):
        adj_xy[1], adj_xy[2], adj_xy[3] = None, None, None

    if f_y == 0:
        adj_xy[7], adj_xy[0], adj_xy[1] = None, None, None
    elif f_y == (len_y - 1):
        adj_xy[3], adj_xy[4], adj_xy[5] = None, None, None

    return [xy for xy in adj_xy if xy is not None]
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    time.sleep(2.5)

    VT100_LVL_RGB.append((  0, 237, 1))  # 0
    VT100_LVL_RGB.append(( 58, 249, 1))  # 1
    VT100_LVL_RGB.append((135, 250, 0))  # 2
    VT100_LVL_RGB.append((206, 251, 2))  # 3
    VT100_LVL_RGB.append((254, 251, 1))  # 4
    VT100_LVL_RGB.append((255, 206, 3))  # 5
    VT100_LVL_RGB.append((253, 154, 1))  # 6
    VT100_LVL_RGB.append((253,  97, 4))  # 7
    VT100_LVL_RGB.append((255,  44, 5))  # 8
    VT100_LVL_RGB.append((240,   5, 5))  # 9

    for lvl in range(len(VT100_LVL_RGB)):
        VT100_LVL_CODES[lvl] = "\033[38;2;%d;%d;%dm" % VT100_LVL_RGB[lvl]

    with open('input.txt') as f:
        f_lines = [t.strip() for t in f.readlines()]

    field = []
    for fl in f_lines:
        field.append([int(t) for t in fl])

    dump_field(field)

    num_flashes = 0
    for i in range(STEPS):
        num_flashes += step(field)
        dump_field(field, i + 1)

    vt100_cur_xy(y=len(field) + 1)
    print("part 1: %d" % num_flashes)

    num_steps, all_flashed = STEPS, False
    while not all_flashed:
        num_steps += 1
        num_flashed = step(field)
        all_flashed = num_flashed == sum([len(t) for t in field])
        dump_field(field, num_steps)

    vt100_cur_xy(y=len(field) + 2)
    print("part 2: %d" % num_steps)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
