# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 12.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import List, Tuple, Set


# ---------------------------------------------------------------------------------------------------------------------
# Types
# ---------------------------------------------------------------------------------------------------------------------
Route = List[str]
Edge = Tuple[str, ...]


# ---------------------------------------------------------------------------------------------------------------------
def can_visit_twice(path: Route) -> bool:

    path_dict = dict()
    for p in path:

        if not p.islower():
            continue

        if p not in path_dict:
            path_dict[p] = 0

        path_dict[p] += 1

    if max(path_dict.values()) < 2:
        return True

    return False
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def build_path_subroutes(path: Route, edges: Set[Edge], visit_twice_allowed: bool = False) -> List[Route]:

    next_nodes: List[str]
    next_nodes = []
    for e in edges:

        nn = None

        if e[0] == path[-1]:
            nn = e[1]
        if e[1] == path[-1]:
            nn = e[0]

        if nn is None:
            continue

        if nn.islower() and nn in path:
            if not visit_twice_allowed:
                continue
            else:
                if nn == 'start':
                    continue
                if not can_visit_twice(path):
                    continue

        next_nodes.append(nn)

    subroutes = []
    for nn in next_nodes:
        path_nn = path + [nn]
        if nn == 'end':
            subroutes.append(path_nn)
        else:
            subroutes += build_path_subroutes(path_nn, edges, visit_twice_allowed=visit_twice_allowed)

    return subroutes
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        f_lines = [t.strip() for t in f.readlines()]

    nodes = set()
    edges = set()
    for fl in f_lines:
        fl_nodes = fl.split('-')
        for n in fl_nodes:
            nodes.add(n)
        edges.add(tuple(fl_nodes))

    routes = build_path_subroutes(['start'], edges)
    print("part 1: %d" % len(routes))

    routes = build_path_subroutes(['start'], edges, visit_twice_allowed=True)
    print("part 2: %d" % len(routes))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
