# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 17.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
import re


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import Tuple, List, Dict, Any, Set


# ---------------------------------------------------------------------------------------------------------------------
class TargetArea:

    # -----------------------------------------------------------------------------------------------------------------
    class _TargetCoord:

        min: int
        max: int

        # -------------------------------------------------------------------------------------------------------------
        def __init__(self, xy_min: int, xy_max: int) -> None:
            self.min = xy_min
            self.max = xy_max
        # -------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    x: _TargetCoord
    y: _TargetCoord

    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, x_min, x_max, y_min, y_max) -> None:
        self.x = self._TargetCoord(x_min, x_max)
        self.y = self._TargetCoord(y_min, y_max)
    # -----------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Types
# ---------------------------------------------------------------------------------------------------------------------
ValidDict = Dict[int, List[int]]


# ---------------------------------------------------------------------------------------------------------------------
# Settings
# ---------------------------------------------------------------------------------------------------------------------
RE_INPUT = re.compile(r"target area: x=(\d+)\.\.(\d+), y=(-?\d+)\.\.(-?\d+)")


# ---------------------------------------------------------------------------------------------------------------------
def store_dict_value(d: Dict[int, Any], k: int, v: Any) -> None:
    if k not in d:
        d[k] = list()
    d[k].append(v)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def calc_valid_dx(ta: TargetArea) -> Tuple[ValidDict, ValidDict]:

    valid_moving_dx: ValidDict
    valid_stopped_dx: ValidDict

    valid_moving_dx = dict()
    valid_stopped_dx = dict()

    for potential_dx in range(1, ta.x.max + 1):

        dx, x, n = potential_dx, 0, 0
        while dx > 0:

            x += dx
            dx -= 1
            n += 1

            if ta.x.min <= x <= ta.x.max:
                store_dict_value(valid_moving_dx, n, potential_dx)

        if ta.x.min <= x <= ta.x.max:
            store_dict_value(valid_stopped_dx, n, potential_dx)

    return valid_moving_dx, valid_stopped_dx
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def calc_valid_dy(ta: TargetArea) -> ValidDict:

    valid_dy: ValidDict
    valid_dy = dict()

    dy_initial = -ta.y.min - 1
    while dy_initial >= ta.y.min:

        y, dy, n = 0, -dy_initial - 1, 2 * dy_initial + 1

        while y >= ta.y.min:
            y += dy
            n += 1
            if ta.y.min <= y <= ta.y.max:
                store_dict_value(valid_dy, n, dy_initial)

            dy -= 1

        dy_initial -= 1

    return valid_dy
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def store_velocities(velocities: Set, valid_dx: Dict, valid_dy: Dict, nx: int, ny: int) -> None:
    for dy in valid_dy[ny]:
        for dx in valid_dx[nx]:
            xy = dx, dy
            velocities.add(xy)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        f_line = f.readline().strip()

    m = RE_INPUT.fullmatch(f_line)
    ta = TargetArea(*(int(t) for t in m.groups()))

    valid_moving_dx, valid_stopped_dx = calc_valid_dx(ta)
    valid_dy = calc_valid_dy(ta)

    y_max = 0
    for ny in valid_dy:
        for dy in valid_dy[ny]:
            y = (dy ** 2 + dy) // 2
            if y > y_max:
                y_max = y

    print("part 1: %d" % y_max)

    velocities = set()

    # moving
    nx_moving_set = set(valid_moving_dx.keys())
    ny_set = set(valid_dy.keys())
    nn_set = nx_moving_set.intersection(ny_set)

    for n in nn_set:
        store_velocities(velocities, valid_moving_dx, valid_dy, n, n)

    # stopped
    for nx in valid_stopped_dx.keys():
        for ny in valid_dy.keys():
            if ny >= nx:
                store_velocities(velocities, valid_moving_dx, valid_dy, nx, ny)

    print("part 2: %d" % len(velocities))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
