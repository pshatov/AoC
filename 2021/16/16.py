# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 16.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# More Imports
# ---------------------------------------------------------------------------------------------------------------------
from typing import Tuple


# ---------------------------------------------------------------------------------------------------------------------
# Variables
# ---------------------------------------------------------------------------------------------------------------------
versions_list = list()


# ---------------------------------------------------------------------------------------------------------------------
def chew_bits(packet: str, count: int) -> Tuple[int, str]:
    piece = packet[0: count]
    return int(piece, 2), packet[count:]
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def chop_bits(packet: str, count: int) -> Tuple[str, str]:
    piece = packet[0: count]
    return piece, packet[count:]
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def parse_packet(packet: str) -> str:

    if len(packet) < 6:
        raise RuntimeError

    version, packet = chew_bits(packet, 3)
    type_id, packet = chew_bits(packet, 3)

    versions_list.append(version)

    if type_id == 4:
        packet = parse_packet_literal(packet)
    else:
        packet = parse_packet_operator(packet)

    return packet
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def parse_packet_literal(packet: str) -> str:

    flag = 1
    while flag > 0:
        if len(packet) < 5:
            raise RuntimeError
        flag, packet = chew_bits(packet, 1)
        data, packet = chew_bits(packet, 4)

    return packet
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def parse_packet_operator(packet: str) -> str:

    if len(packet) < 1:
        raise RuntimeError

    length_type, packet = chew_bits(packet, 1)

    if length_type == 0:

        if len(packet) < 15:
            raise RuntimeError

        len_sub_packets, packet = chew_bits(packet, 15)

        if len(packet) < len_sub_packets:
            raise RuntimeError

        sub_packets, packet = chop_bits(packet, len_sub_packets)
        while len(sub_packets) > 0:
            sub_packets = parse_packet(sub_packets)

    else:

        if len(packet) < 11:
            raise RuntimeError

        num_sub_packets, packet = chew_bits(packet, 11)
        while num_sub_packets > 0:
            packet = parse_packet(packet)
            num_sub_packets -= 1

    return packet
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        packet_hex = [int(t, 16) for t in f.readline().strip()]

    packet = ''.join([format(t, "04b") for t in packet_hex])

    while packet.endswith('0'):
        packet = packet[:-1]

    while len(packet) > 0:
        packet = parse_packet(packet)

    print("part 1: %d" % sum(versions_list))
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
