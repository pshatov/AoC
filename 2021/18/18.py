# ---------------------------------------------------------------------------------------------------------------------
# AoC 2021
# ---------------------------------------------------------------------------------------------------------------------
# 18.py
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------------------------------------------------
import math


# ---------------------------------------------------------------------------------------------------------------------
def add(x: str, y: str) -> str:
    return "[%s,%s]" % (x, y)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def reduce_explode_left(s: str, sl: int) -> str:

    s_left, s_mid, s_right = s, "", ""
    while len(s_left) > 0 and not s_left[-1].isdigit():
        s_right = s_left[-1] + s_right
        s_left = s_left[: -1]

    if not s_left:
        return s_right

    while s_left[-1].isdigit():
        s_mid = s_left[-1] + s_mid
        s_left = s_left[: -1]

    return s_left + str(int(s_mid) + sl) + s_right
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def reduce_explode_right(s: str, sr: int) -> str:

    s_left, s_mid, s_right = "", "", s
    while len(s_right) > 0 and not s_right[0].isdigit():
        s_left = s_left + s_right[0]
        s_right = s_right[1:]

    if not s_right:
        return s_left

    while s_right[0].isdigit():
        s_mid = s_mid + s_right[0]
        s_right = s_right[1:]

    return s_left + str(int(s_mid) + sr) + s_right
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def reduce_explode(s: str) -> str:

    s_left, s_mid, s_right = "", "", ""
    num_opened, num_closed = 0, 0
    for i in range(len(s)):
        c = s[i]

        if c == '[':
            num_opened += 1
        elif c == ']':
            num_closed += 1

        if num_opened - num_closed < 5:
            if s_mid == "":
                s_left += c
            else:
                s_mid += c
                s_right = s[i + 1:]
                sl, sr = [int(t) for t in s_mid[1: -1].split(',')]
                s_left = reduce_explode_left(s_left, sl)
                s_right = reduce_explode_right(s_right, sr)
                return s_left + "0" + s_right

        if num_opened - num_closed == 5:
            s_mid += c

    return s
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def reduce_split(s: str) -> str:

    i = 0
    while True:

        while not s[i].isdigit():
            i += 1
            if i == len(s):
                return s

        j = i + 1
        while s[j].isdigit():
            j += 1

        sd = int(s[i:j])
        if sd >= 10:
            return s[:i] + ("[%s,%s]" % (math.floor(sd / 2), math.ceil(sd / 2))) + s[j:]

        i += 1
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def reduce(s0: str) -> str:
    s1 = s0
    while True:

        s2 = reduce_explode(s1)

        if s2 != s1:
            # print("after explode: %s" % s2)
            s1 = s2
            continue

        s3 = reduce_split(s2)

        if s3 == s1:
            return s1

        # print("after split: %s" % s3)
        s1 = s3
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def magnitude(s: str) -> int:

    num_opened, num_closed = 1, 0
    for i in range(1, len(s)):
        c = s[i]
        if c == '[':
            num_opened += 1
        elif c == ']':
            num_closed += 1
        elif c == ',':
            if num_opened - num_closed == 1:
                x = s[1: i]
                y = s[i + 1: -1]
                x_val = magnitude(x) if ',' in x else int(x)
                y_val = magnitude(y) if ',' in y else int(y)
                return 3 * x_val + 2 * y_val
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
def main() -> None:

    with open('input.txt') as f:
        numbers = [t.strip() for t in f.readlines()]

    s = ""
    for n in numbers:
        if not s:
            s = n
        else:
            s = reduce(add(s, n))
            # print("after addition: %s" % s)

    print("part 1: %s" % magnitude(s))

    m_max = 0
    for i in range(len(numbers)):
        for j in range(len(numbers)):
            if i == j:
                continue
            s = reduce(add(numbers[i], numbers[j]))
            s = reduce(s)
            m = magnitude(s)
            if m > m_max:
                m_max = m

    print("part 2: %d" % m_max)
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# End of File
# ---------------------------------------------------------------------------------------------------------------------
